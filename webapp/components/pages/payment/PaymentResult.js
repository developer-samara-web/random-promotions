"use client";

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { useState, useEffect } from "react";
import { getTransaction } from "@/controllers/Transactions";
import Preloader from "@/components/ui/Preloader/Preloader";
import Button from "@/components/ui/Button/Button";
import Error from "@/components/ui/Error/Error";
import Success from "@/components/ui/Success/Success";
import Page from "@/components/ui/Page/Page";
import Image from "next/image";
import Header from "@/components/ui/Header/Header";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç PaymentResult
export default function PaymentResult({ transactionId }) {
    const [transaction, setTransaction] = useState(null)
    const [error, setError] = useState(null)
    const [loading, setLoading] = useState(true)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    useEffect(() => {
        if (!transactionId) return;

        const fetchData = async () => {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { response, error } = await getTransaction(transactionId);
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç
                if (!error) { setTransaction(response) }
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", e);
                setError(e.message);
            } finally {
                setLoading(false)
            }
        };

        fetchData();
    }, [transactionId]);

    if (loading) {
        return (
            <Page>
                <Preloader title="–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–æ–≤" />
            </Page>
        );
    }

    if (error) {
        return (
            <Page>
                <Error title="–û—à–∏–±–∫–∞" description={error.message} />
            </Page>
        );
    }

    return (
        <Page>
            {
                transaction?.status === 'completed' ? (
                    <>
                        <Header title="üéâ –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è" description={`ID: ${transaction._id}`} />
                        <Image src="/payment-check.png" width="120" height="120" alt="no-credit-card" />
                        <Success title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" description="–ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã. –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!" />
                        <div className="w-full flex flex-col gap-3">
                            <Button name="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞" icon="XCircleIcon" className="text-yellow-900 !bg-yellow-400" event={() => window.location.href = 'tg://close'} />
                        </div>
                    </>
                ) : transaction.status === 'in_progress' ? (
                    <>
                        <Header title="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞" description={`ID: ${transaction._id}`} />
                        <Image src="/payment-check.png" width="120" height="120" alt="no-credit-card" />
                        <Success title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" description="–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –æ–ø–ª–∞—Ç—É –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –∏ —Å–µ–π—á–∞—Å –µ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ." />
                        <div className="w-full flex flex-col gap-3">
                            <Button name="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞" icon="XCircleIcon" className="text-yellow-900 !bg-yellow-400" event={() => Telegram.WebApp.close()} />
                        </div>
                    </>
                ) : (
                    <>
                        <Header title="üéâ –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏" description={`ID: ${transaction._id}`} />
                        <Image src="/no-credit-card.png" width="120" height="120" alt="no-credit-card" />
                        <Error title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" description="–ú—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!" />
                        <div className="w-full flex flex-col gap-3">
                            <Button name="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç–∞" icon="XCircleIcon" className="text-yellow-900 !bg-yellow-400" event={() => Telegram.WebApp.close()} />
                        </div>
                    </>
                )
            }
        </Page>
    )
}