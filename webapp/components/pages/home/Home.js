"use client"

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { useEffect, useState } from 'react';
import { participantMiddleware } from "@/middlewares/participantMiddleware";
import { setParticipant } from "@/controllers/Participant";
import Page from "@/components/ui/Page/Page";
import Header from "@/components/ui/Header/Header";
import Promotion from "@/components/ui/Promotion/Promotion";
import Block from "@/components/ui/Block/Block";
import Preloader from '@/components/ui/Preloader/Preloader';
import Success from "@/components/ui/Success/Success";
import Error from "@/components/ui/Error/Error";
import Button from "@/components/ui/Button/Button";
import Image from "next/image"

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function Home() {
    const [isLoading, setIsLoading] = useState(true);
    const [promotion, setPromotion] = useState(null);
    const [user, setUser] = useState(null);
    const [success, setSuccess] = useState(false);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                if (window.Telegram && Telegram.WebApp) {
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const telegram_id = Telegram.WebApp.initDataUnsafe.user?.id;
                    const promotion_id = Telegram.WebApp.initDataUnsafe?.start_param;
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è
                    const { doubble, access, error } = await participantMiddleware(telegram_id, promotion_id, setPromotion, setUser, setSuccess);
                    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
                    if (error) { throw { ...error } }
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    setUser(access.user.response)
                    setPromotion(access.promotion.response)

                    if (doubble) {
                        setSuccess(true); return;
                    }
                }
            } catch (e) {
                setError(e);
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
    }, []);

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if (isLoading) {
        return (
            <Page>
                <Preloader />
            </Page>
        );
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
    if (error) {
        return (
            <Page>
                <Error title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" description={error.message} />
                {error.buttons && <Button link={error.buttons.url} name={error.buttons.name} icon={error.buttons.icon} />}
            </Page>
        );
    }

    // –ü—Ä–∏ —É–¥–∞—á–Ω–æ–º —É—á–∞—Å—Ç–∏–∏
    if (success) {
        return (
            <Page>
                <Header title={`–†–∞–∑–¥–∞—á–∞ #${promotion.title_id}`} />
                <Success title="‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∞–∑–¥–∞—á–µ!" />
                <Image src="/pending.png" width={200} height={200} alt={promotion._id} />
                <Block className="flex flex-col gap-2">
                    <b>üìÖ –ò—Ç–æ–≥–∏ –±—É–¥—É—Ç –ø–æ–¥–≤–µ–¥–µ–Ω—ã:<br></br>
                        ‚úÖ {promotion.end_date}.</b>
                </Block>
            </Page>
        );
    }

    // –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    return (
        <Page>
            <Header title={`–ê–∫—Ü–∏—è #${promotion.title_id}`} />
            <Promotion title={promotion.title} description={promotion.description} image={promotion.banner_image} status={promotion.status} subscribe={promotion.requires_subscription} />
            <Button name="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ" icon="CheckCircleIcon" event={() => setParticipant(promotion._id, user._id, setSuccess)} />
        </Page>
    );
}