"use client"

// –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
import { useEffect, useState } from 'react';
import { getParticipants, getParticipant, setParticipant } from "@/controllers/Participant";
import { getPromotion } from "@/controllers/Promotions";
import { getUser, getSubscribe } from "@/controllers/Users";
import Preloader from '@/components/ui/Preloader/Preloader';
import Join from "@/components/ui/Join/Join";
import Rule from '@/components/ui/Rule/Rule';
import Page from "@/components/ui/Page/Page";
import Header from "@/components/ui/Header/Header";
import Error from "@/components/ui/Error/Error";
import Button from "@/components/ui/Button/Button";
import Profile from "@/components/ui/Profile/Profile";
import formatDate from "@/utils/formatDate";
import checkLimit from '@/utils/checkLimit';
import Image from "next/image";

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç
export default function Home() {
    const [isLoading, setIsLoading] = useState(true);
    const [screen, setScreen] = useState(false);
    const [promotion, setPromotion] = useState(null);
    const [participants, setParticipants] = useState(null);
    const [user, setUser] = useState(null);
    const [rules, setRules] = useState(null);
    const [popup, setPopap] = useState(false)
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchData = async () => {
            try {
                if (window.Telegram && Telegram.WebApp) {
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    const { user, start_param: promotion_id } = Telegram.WebApp.initDataUnsafe;

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                    await getSubscribe(user.id);

                    if (promotion_id) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É—á–∞—Å—Ç–∏—è –∞–∫—Ü–∏–∏
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const { error: userError, response: userData } = await getUser(user.id);
                        const { error: promotionError, response: promotionData } = await getPromotion(promotion_id);
                        const { error: participantsError, response: participantsData } = await getParticipants(userData._id);

                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        if (!userError || !promotionError || participantsError) {
                            setParticipants(participantsData);
                            setPromotion(promotionData);
                            setUser(userData);
                        }

                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏
                        if(promotionData.status === 'completed') {
                            setScreen('end');
                            return;
                        }

                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–∞—Å—Ç–∏—è
                        const { access } = await getParticipant(userData._id, promotionData._id);
                        if (!access) {
                            setScreen('participant');
                            return;
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–∏–π
                        const participantsMonth = checkLimit(participantsData);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
                        const rules = {
                            subscribe: userData.channel_subscription ? false : true,
                            premium: promotionData.requires_subscription && !userData.subscription.is_active,
                            registration: userData ? false : true,
                            free: participantsMonth.length >= 2 && !userData.subscription.is_active ? true : false
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞
                        const rulesStatus = Object.values(rules).every(value => value === false);

                        if (rulesStatus) {
                            setRules({ ...rules });

                            if (access) {
                                await setParticipant(promotionData._id, userData._id);
                                setScreen('participant-access');
                                return;
                            } else {
                                setScreen('participant');
                                return;
                            }
                        } else {
                            setRules({ ...rules });
                            setScreen('rules');
                            return;
                        }

                    } else { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const { error: userError, response: userData } = await getUser(user.id);
                        const { error: participantsError, response: participantsData } = await getParticipants(userData._id);

                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                        if (!userError || !participantsError) {
                            setParticipants(participantsData);
                            setUser(userData);
                        }
                    }
                }
            } catch (e) {
                setError(e);
            } finally {
                setIsLoading(false);
            }
        };

        fetchData();
    }, []);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
    const refreshRulesHandler = async (user) => {
        if (!user.channel_subscription) { await getSubscribe(user.telegram_id) }
        return window.location.reload();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞
    if (isLoading && !screen) {
        return (
            <Page>
                <Preloader title="–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ" />
            </Page>
        );
    }

    // –û—à–∏–±–∫–∞
    if (error) {
        return (
            <Page>
                <Error title="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞" description={error.message} />
            </Page>
        );
    }

    // –≠–∫—Ä–∞–Ω —É—á–∞—Å—Ç–∏—è
    if (!isLoading && screen === 'end') {
        return (
            <Page>
                <Join
                    title="–†–∞–∑–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                    description="–°–ø–∞—Å–∏–±–æ –≤—Å–µ–º, –∫—Ç–æ –ø—Ä–∏–Ω—è–ª —É—á–∞—Å—Ç–∏–µ! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º–∏ —Ä–∞–∑–¥–∞—á–∞–º–∏ ‚Äî –≤–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –∫—Ä—É—Ç—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã! üöÄ"
                    promotion={promotion}
                />
            </Page>
        );
    }

    // –≠–∫—Ä–∞–Ω —É—á–∞—Å—Ç–∏—è
    if (!isLoading && screen === 'participant') {
        return (
            <Page>
                <Join
                    title="–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ"
                    description="–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —ç—Ç–æ–π –∞–∫—Ü–∏–∏. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ –º—ã –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∏ –∂–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!"
                    date={formatDate(promotion.end_date)}
                    promotion={promotion}
                />
            </Page>
        );
    }

    // –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è
    if (!isLoading && screen === 'participant-access') {
        return (
            <Page>
                <Join
                    title="–£—Å–ø–µ—à–Ω–æ!"
                    description="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞–∫—Ü–∏–∏. –ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –æ–¥–Ω–∏–º –∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
                    date={formatDate(promotion.end_date)}
                    promotion={promotion}
                />
            </Page>
        );
    }

    // –≠–∫—Ä–∞–Ω –ø—Ä–∞–≤–∏–ª
    if (!isLoading && screen === 'rules') {
        return (
            <Page>
                <Header title={`${promotion.title}`} description={promotion._id} />
                <Image src="/message.png" width={100} height={100} alt="message" />
                <div className='text-xl font-medium text-center'>–í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞</div>
                <Button name="–û —Ä–æ–∑—ã–≥—Ä—ã—à–µ" icon="InformationCircleIcon" className="!bg-[#3b82f630]" event={() => setPopap(true)} />
                <div className='text-sm uppercase text-slate-400 font-medium text-center'>–í—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è:</div>
                {rules.registration && <Rule name="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" description="–≤ —Å–∏—Å—Ç–µ–º–µ" image="/logo.jpg" button={{ name: "–ü—Ä–æ–π—Ç–∏", style: "!py-4 !h-2 !w-28 !text-[9px] !rounded-xl", onClick: () => Telegram.WebApp.openTelegramLink(`${process.env.NEXT_PUBLIC_TELEGRAM_BOT_URL}`) }} status={rules.registration} />}
                {rules.subscribe && <Rule name="Mr. –†–∞–∑–¥–∞—á–∫–∏–Ω" description="–ü–æ–¥–ø–∏—Å–∫–∞" image="/logo.jpg" button={{ name: "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", style: "!py-4 !h-2 !w-28 !text-[9px] !rounded-xl", onClick: () => Telegram.WebApp.openTelegramLink(`${process.env.NEXT_PUBLIC_TELEGRAM_CHANEL_URL}`) }} status={!rules.subscribe} />}
                {rules.premium && <Rule name="Premium" description="–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" icon="StarIcon" button={{ name: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", style: "!py-4 !h-2 !w-28 !text-[9px] !rounded-xl", link: "/premium" }} status={!rules.premium} />}
                {rules.free && <Rule name="Free –ª–∏–º–∏—Ç" description="–£—á–∞—Å—Ç–∏–π –≤ —Ä–∞–∑–¥–∞—á–∞—Ö" icon="ExclamationTriangleIcon" button={{ name: "–ü–æ–¥—Ä–æ–±–Ω–µ–µ", style: "!py-4 !h-2 !w-28 !text-[9px] !rounded-xl", link: "/premium" }} status={!rules.free} />}
                <Button name="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è" icon="ArrowPathIcon" event={() => refreshRulesHandler(user)} />
                <Button name="–ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" icon="XCircleIcon" className="text-yellow-900 !bg-yellow-400" event={() => Telegram.WebApp.close()} />
                <div className={`fixed bottom-0 left-0 right-0 transform transition-transform duration-300 ease-out ${popup ? 'translate-y-0' : 'translate-y-full'} rounded-t-3xl bg-[#172b51] w-full p-5 text-black border-t border-slate-900 z-50`}>
                    <div className="flex flex-col items-start gap-4">
                        <div className='flex flex-row gap-5 items-center'>
                            <Image className='rounded-xl shrink-0 object-cover' src={promotion.banner_image} alt="promotion" width={50} height={50} />
                            <h3 className="text-base font-bold uppercase text-white">{promotion.title}</h3>
                        </div>
                        <div className="flex flex-col">
                            <p className="text-sm text-white white-space: pre-line" dangerouslySetInnerHTML={{ __html: promotion.description.replace(/\n/g, "<br />") }}></p>
                        </div>
                        <Button name="–ó–∞–∫—Ä—ã—Ç—å" icon="XCircleIcon" className="text-yellow-900 !bg-yellow-400 hover:!bg-yellow-500 transition-colors" event={() => setPopap(false)} />
                    </div>
                </div>
            </Page>
        );
    }

    // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return (
        <Page>
            <Profile username={user.username} participants={participants} />
        </Page>
    )
}