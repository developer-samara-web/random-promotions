// –ò–º–ø–æ—Ä—Ç—ã
import connectToDatabase from "#services/mongodb.js";
import Promotion from "#models/Promotion.js";
import logger from "#utils/logs.js";

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
export async function getPromotion(id) {
	try {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		if (!id) { throw new Error('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö, id –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.') }
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
		await connectToDatabase();
		// –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏—é
		const promotion = await Promotion.findById(id);
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
		if (!promotion) { return null };
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
		return promotion;
	} catch (e) {
		logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–∏:', e);
	}
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
export async function setPromotion(body) {
	try {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		if (!body) { throw new Error('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: body –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.') }
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
		await connectToDatabase();
		// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∞–∫—Ü–∏—é
		const promotion = new Promotion(body);
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
		await promotion.save();
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
		if (!promotion) { return null };
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
		logger.info(`–ù–æ–≤–∞—è –∞–∫—Ü–∏—è: ${promotion._id}.`);
		return promotion;
	} catch (e) {
		logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏:', e);
	}
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
export async function updatePromotion(id, body) {
	try {
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		if (!id || !body) { throw new Error('–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: id –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.') }
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
		await connectToDatabase();
		// –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
		const promotion = await Promotion.findOneAndUpdate(
			{ _id: id },
			{ $set: body },
			{ new: true }
		);
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
		if (!promotion) { return null };
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
		logger.info(`–ê–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${promotion._id}`);
		return promotion;
	} catch (e) {
		logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏:', e);
	}
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
export async function publishPromotion(id, promotion, telegram) {
	try {
		const message = `üéâ –ù–æ–≤–∞—è –∞–∫—Ü–∏—è!\n\n${promotion.name}\n\n${promotion.description}`;

		await telegram.sendPhoto(id, promotion.image, {
			caption: message,
			parse_mode: 'HTML'
		});
	} catch (e) {
		logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ü–∏–∏:', e);
	}
};